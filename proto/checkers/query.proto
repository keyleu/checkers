syntax = "proto3";
package alice.checkers.checkers;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
// this line is used by starport scaffolding # 1
import "checkers/stored_game.proto";
import "checkers/next_game.proto";

option go_package = "github.com/alice/checkers/x/checkers/types";

// Query defines the gRPC querier service.
service Query {
    // this line is used by starport scaffolding # 2

	// Queries a list of canPlayMove items.
	rpc CanPlayMove(QueryCanPlayMoveRequest) returns (QueryCanPlayMoveResponse) {
		option (google.api.http).get = "/alice/checkers/checkers/canPlayMove";
	}


	// Queries a storedGame by index.
	rpc StoredGame(QueryGetStoredGameRequest) returns (QueryGetStoredGameResponse) {
		option (google.api.http).get = "/alice/checkers/checkers/storedGame/{index}";
	}

	// Queries a list of storedGame items.
	rpc StoredGameAll(QueryAllStoredGameRequest) returns (QueryAllStoredGameResponse) {
		option (google.api.http).get = "/alice/checkers/checkers/storedGame";
	}


	// Queries a nextGame by index.
	rpc NextGame(QueryGetNextGameRequest) returns (QueryGetNextGameResponse) {
		option (google.api.http).get = "/alice/checkers/checkers/nextGame";
	}

}

// this line is used by starport scaffolding # 3
message QueryCanPlayMoveRequest {
  string idValue = 1;
  string player = 2;
  uint64 fromX = 3;
  uint64 fromY = 4;
  uint64 toX = 5;
  uint64 toY = 6;
}

message QueryCanPlayMoveResponse {
  bool possible = 1;
  string reason = 2;
}

message QueryGetStoredGameRequest {
	string index = 1;
}

message QueryGetStoredGameResponse {
	StoredGame StoredGame = 1;
}

message QueryAllStoredGameRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllStoredGameResponse {
	repeated StoredGame StoredGame = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
message QueryGetNextGameRequest {}

message QueryGetNextGameResponse {
	NextGame NextGame = 1;
}
